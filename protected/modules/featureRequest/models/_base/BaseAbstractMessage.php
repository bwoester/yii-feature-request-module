<?php

/**
 * This is the model base class for the table "abstractmessage".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "AbstractMessage".
 *
 * Columns in table "abstractmessage" available as properties of the model,
 * followed by relations of table "abstractmessage" available as properties of the model.
 *
 * @property integer $id
 * @property string $title
 * @property string $content
 * @property string $created_time
 * @property integer $author
 *
 * @property Abstractuser $id0
 * @property Comment $comment
 * @property Featurerequest $featurerequest
 */
abstract class BaseAbstractMessage extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'abstractmessage';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'AbstractMessage|AbstractMessages', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title, content, created_time, author', 'required'),
			array('author', 'numerical', 'integerOnly'=>true),
			array('title', 'length', 'max'=>45),
			array('id, title, content, created_time, author', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'id0' => array(self::BELONGS_TO, 'Abstractuser', 'id'),
			'comment' => array(self::HAS_ONE, 'Comment', 'id'),
			'featurerequest' => array(self::HAS_ONE, 'Featurerequest', 'id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => null,
			'title' => Yii::t('app', 'Title'),
			'content' => Yii::t('app', 'Content'),
			'created_time' => Yii::t('app', 'Created Time'),
			'author' => Yii::t('app', 'Author'),
			'id0' => null,
			'comment' => null,
			'featurerequest' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('created_time', $this->created_time, true);
		$criteria->compare('author', $this->author);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}